{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["defaultState","text","store","createStore","state","arguments","length","undefined","action","type","Object","assign","App","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","bind","assertThisInitialized","e","addText","target","value","react_default","a","createElement","className","id","onChange","dangerouslySetInnerHTML","__html","marked","sanitize","breaks","Component","Container","connect","dispatch","AppWrapper","es","Boolean","window","location","hostname","match","ReactDOM","render","App_AppWrapper","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+SAgBMA,EAAe,CACnBC,KAAI,i9BAgDAC,EAAQC,YATM,WAAkC,IAAjCC,EAAiCC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAzBL,EAAcQ,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACpD,OAAOC,EAAOC,MACZ,IAnDQ,MAoDR,OAAOC,OAAOC,OAAO,GAAGP,EAAO,CAAEH,KAAMO,EAAOP,OAC9C,QACA,OAAOG,KAOJQ,cACL,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAJ,OAAAK,EAAA,EAAAL,CAAAM,KAAAJ,IAChBE,EAAAJ,OAAAO,EAAA,EAAAP,CAAAM,KAAAN,OAAAQ,EAAA,EAAAR,CAAAE,GAAAO,KAAAH,KAAMH,KACHO,aAAeN,EAAKM,aAAaC,KAAlBX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAI,KAFFA,4EAMLS,GACXP,KAAKH,MAAMW,QAAQD,EAAEE,OAAOC,wCAI5B,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAd,UACDH,EAAAC,EAAAC,cAAA,YAAWE,GAAG,SAASD,UAAU,aAAaJ,MAAOV,KAAKH,MAAMZ,KAAM+B,SAAUhB,KAAKI,eACrFO,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAd,aACAH,EAAAC,EAAAC,cAAA,OAAKE,GAAG,UAAUD,UAAU,cAAcG,wBAA0B,CAACC,OAAQC,IAAOnB,KAAKH,MAAMZ,KAAK,CAACmC,UAAU,EAAMC,QAAQ,eAjBjHC,aAuCbC,EAAYC,YAdM,SAACpC,GACvB,MAAO,CACLH,KAAMG,EAAMH,OAIW,SAACwC,GAC1B,MAAO,CACLjB,QAAS,SAACvB,GACRwC,EA7FU,SAACxC,GACf,MAAO,CACPQ,KAJU,MAKVR,KAAMA,GA0FOuB,CAAQvB,OAKLuC,CAA6C5B,GAG1C8B,mLAEjB,OACEf,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAUzC,MAAOA,GACfyB,EAAAC,EAAAC,cAACU,EAAD,cAJgCD,aClGpBM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvB,EAAAC,EAAAC,cAACsB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a318ef61.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport { Provider, connect } from 'react-redux';\nimport { createStore } from'redux';\nimport marked from \"marked\";\n\n// Redux\nconst ADD = \"ADD\";\n\nconst addText = (text) => {\n  return {\n  type: ADD,\n  text: text\n  }\n};\n\nconst defaultState = {\n  text: `# Welcome to my React Markdown Previewer\n  ## This is a sub-heading...\n  ### And here's some other cool stuff:\n    \n  Heres some code, \\`<div></div>\\`, between 2 back-ticks.\n  \n  \\`\\`\\`\n  // this is multi-line code:\n  \n  function anotherExample(firstLine, lastLine) {\n    if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\n      return multiLineCode;\n    }\n  }\n  \\`\\`\\`\n    \n  You can also make text **bold**... whoa!\n  Or _italic_.\n  Or... wait for it... **_both!_**\n  \n  There's also [links](https://www.freecodecamp.com), and\n  > Block Quotes!\n    \n  - And of course there are lists.\n    - Some are bulleted.\n       - With different indentation levels.\n          - That look like this.\n  \n  \n  1. And there are numbered lists too.\n  1. Use just 1s if you want! \n  1. But the list goes on...\n  - Even if you use dashes or asterisks.\n  * And last but not least, let's not forget embedded images:\n  \n  ![React Logo w/ Text](https://goo.gl/Umyytc)\n  `\n};\n\nconst textReducer = (state = defaultState, action) => { \n  switch(action.type) {\n    case ADD:\n    return Object.assign({},state, { text: action.text })\n    default:\n    return state\n  }\n};\n\nconst store = createStore(textReducer);\n\n// React\n class App extends Component {\n  constructor(props){\n    super(props)\n  this.handleChange = this.handleChange.bind(this);\n  \n};\n\n  handleChange(e){\n    this.props.addText(e.target.value)\n  };\n  \n  render(){\n    return(\n      <div className=\"App-header\">\n        <h1 className=\"App-title\">Editor</h1>\n       <textarea  id=\"editor\" className=\"App-editor\" value={this.props.text} onChange={this.handleChange}></textarea>\n       <h1 className=\"App-title\">Previewer</h1>\n       <div id=\"preview\" className=\"App-preview\" dangerouslySetInnerHTML={ {__html: marked(this.props.text,{sanitize: true, breaks: true}) } }></div>\n      </div>\n    )\n  }\n};\n\n\n// React-Redux\nconst mapStateToProps = (state) => {\n  return {\n    text: state.text\n  }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    addText: (text) => { \n      dispatch(addText(text))\n    }\n  }\n};\n\nconst Container = connect(mapStateToProps, mapDispatchToProps)(App);\n\n// eslint-disable-next-line\nexport default class AppWrapper extends Component {\n  render() {\n    return(\n      <Provider store={store}>\n        <Container />\n      </Provider>\n    );\n  }\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}